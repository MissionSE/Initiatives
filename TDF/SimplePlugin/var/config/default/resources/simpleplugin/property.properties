# General Properties
# ------------------
#
# <propertyName>.typeName=<string>
#   description: The text to use when displaying what type of data this
#                property provides access to.
#
# <propertyName>.typeAbbrev=<string>
#   description: This is an abbreviated version of the typeName property.
#                This could be an acronym for the typeName or a commonly
#                used abbreviation.
#
# <propertyName>.help=<string>
#   description: The text to use when displaying help about a property.
#                This should be a verbose description of the particular
#                piece of information that the property provides access to.
#
# <propertyName>.group=<list of strings>
#   description: A comma separated list of strings that specifies which
#                group this property is a part of.  This is often used to
#                group similar properties when displaying them to a user.
#                For example, specifying a group of Number would cause
#                a detail created from that property to be placed in a
#                node labeled "Number" in the detail selection tree.
#
# <propertyName>.hidden=[true|false]
#   default: false
#   description: If true, the property will not be included when the
#                PropertyManager is asked to return a collection of properties.
#                This is useful when a property exists only to facilitate
#                chaining and isn't intended to be used for other
#                property-related functions like details, conditions, etc..
#
# <propertyName>.chain=<true|false|list of subproperties>
#   default: true
#   description: Indicates whether sub-properties should be generated for
#                this property. If the value is false then no subproperties
#                will be generated for this property.  If true, sub-properties
#                will be generated based on this property's return class. If 
#                the value is a comma or space separated list of property
#                names, only those sub-properties will be generated.
#
# <propertyName>.chainable=<true|false>
#   default: true
#   description: Indicates whether this property should be chained to other
#                properties.  If this is set to false then the property will
#                only work directly on objects, it will not work on return
#                values from other properties.  Defaults to true.
#
# <propertyName>.dataLabel=<string>
#   description: The text to use when labeling the component used to enter
#                any extra data required by the property.
#
# <propertyName>.dependsOn=<propertyName>
#   description: Used to indicate that a property depends on the value of
#                another property.  This can be used when displaying editors
#                for a group of properties so that an editor for a property
#                that depends on another property can be updated when the
#                editor for the property it depends on changes.
#
# Measure Properties
# ------------------
# <propertyName>.formatGroup=<string>
#   description: The string is used to find the format object to use from
#   the GlobalFormat mechanism.
#
# Detail-Specific Properties
# --------------------------
#
# The following properties control the dynamic creation of
# of Details from Property objects.
#
# <propertyName>.detail.suppress=[true|false]
#   default: false
#   description: If set to true, no detail will be generated for <propertyName>
#
# <propertyName>.detail.labeled=[true|false]
#   default: true
#   description: If set to false, there will be no label on
#                the detail generated for <propertyName>
#
# <propertyName>.detail.configuration=<list of strings>
#   default: null
#   description: If set, this will cause the newly generated detail
#                to be passed through the Configure mechanism so that
#                it can be initialized to a default state.  The comma
#                separated list of strings should contain at most 2
#                strings, which will be used as the resource and
#                subresource values passed to the configure mechanism.
#                If the list contains just one string, it will be passed
#                as the resource with no subresource.  If this resource
#                is not set, the detail will not undergo configuration.
#   
# <propertyName>.detail.class=<detailclassname>
#   default: com.solipsys.property.detail.LabeledPropertyDetail or
#            com.solipsys.property.detail.LabeledBooleanPropertyDetail
#            if the property's return type is Boolean.class
#   description: This property can be set to force a different
#                class to be used when creating a detail for
#                <propertyName>.  The <detailclassname> class
#                must have either a constructor that takes a 
#                Property as its only parameter or it must have
#                a no-arg constructor and a method of the form:
#                setXXX( Property p ).  (XXX can be anything, as
#                long as the method starts with set and takes a
#                Property as is only parameter)
#
# Condition-Specific Properties
# -----------------------------
#
# The following properties control the dynamic creation of
# of Conditions from Property objects.
#
# <propertyName>.condition.suppress=[true|false]
#   default: false
#   description: If set to true, no condition will be generated for <propertyName>
#
# <propertyName>.condition.cost=<float value>
#   default: 5
#   description: Sets the cost of evaluating a condition.  See JavaDoc's for
#                the com.solipsys.condition.Condition class for more info.
#            
# <propertyName>.condition.class=<conditionclassname>
#   default: com.solipsys.property.condition.PropertyCondition
#   description: This property can be set to force a different
#                class to be used when creating a condition for
#                <propertyName>.  The <conditionclassname> class
#                must have either a constructor that takes a 
#                Property as its only parameter or it must have
#                a no-arg constructor and a method of the form:
#                setXXX( Property p ).  (XXX can be anything, as
#                long as the method starts with set and takes a
#                Property as is only parameter)
#
